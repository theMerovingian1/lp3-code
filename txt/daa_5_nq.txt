class N_Queen_Solver:
    def __init__(self, N):
        self.N = N
        self.board = [[0]*N for _ in range(N)]
        
    def is_attack(self, i, j):
        for k in range(self.N):
            if self.board[i][k] == 1 or self.board[k][j] == 1:
                return True
            
        for k in range(self.N):
            for l in range(self.N):
                if (k+l == i+j) or (k-l==i-j):
                    if self.board[k][l] == 1:
                        return True
        return False
        
    def n_queens(self, n):
        if n == 0:
            return True
            
        for i in range(self.N):
            for j in range(self.N):
                if (not (self.is_attack(i,j))) and self.board[i][j]!=1:
                    self.board[i][j] = 1
                    
                    if self.n_queens(n-1):
                        return True
                    self.board[i][j] = 0
        return False
                    
    def solve_n_queens(self,n):
        self.n_queens(n)
                    
    def print_board(self):
        for row in self.board:
            print(row)

def main():
    while True:
        
        n = int(input("Enter number of queens: "))
        if n <= 3:
            print("N queens solution not possible for this number: ", n)
            continue
        obj = N_Queen_Solver(n)
        obj.solve_n_queens(n)
        obj.print_board()
        ch = input("Try one more time? (y), (n): ")
        if ch.lower().strip() == 'n':
            print("Goodbye!")
            break
    
if __name__ == '__main__':
    main()