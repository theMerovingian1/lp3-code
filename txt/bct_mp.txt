// Rushikesh Borade BE Comp Roll no. 2
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract EVoting {
    // Structure to store details of a candidate
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }

    // Structure to store details of a voter
    struct Voter {
        bool isRegistered;
        bool hasVoted;
        uint votedCandidateId;
    }

    address public admin;
    bool public votingActive;

    // Mapping from voter address to voter details
    mapping(address => Voter) public voters;
    
    // Mapping to store candidates
    mapping(uint => Candidate) public candidates;
    
    // Count of candidates
    uint public candidatesCount;

    // Event to be emitted when a vote is cast
    event Voted(address indexed voter, uint indexed candidateId);
    
    // Event to be emitted when a candidate is added
    event CandidateAdded(uint indexed candidateId, string name);
    
    // Event to be emitted when voting starts or ends
    event VotingStatusChanged(bool isActive);

    constructor() {
        admin = msg.sender;
        votingActive = false;
    }

    // Modifier to allow only the admin to execute certain functions
    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can perform this action");
        _;
    }

    // Modifier to ensure that voting is currently active
    modifier whenVotingActive() {
        require(votingActive == true, "Voting is not active");
        _;
    }

    // Function to start or stop the voting process (admin only)
    function toggleVoting() public onlyAdmin {
        votingActive = !votingActive;
        emit VotingStatusChanged(votingActive);
    }

    // Function to register a candidate (admin only)
    function registerCandidate(string memory _name) public onlyAdmin {
        candidatesCount++;
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);
        
        emit CandidateAdded(candidatesCount, _name);
    }

    // Function to register a voter
    function registerVoter(address _voter) public onlyAdmin {
        require(!voters[_voter].isRegistered, "Voter is already registered");

        voters[_voter] = Voter({
            isRegistered: true,
            hasVoted: false,
            votedCandidateId: 0
        });
    }

    // Function to vote for a candidate
    function vote(uint _candidateId) public whenVotingActive {
        require(voters[msg.sender].isRegistered, "You are not a registered voter");
        require(!voters[msg.sender].hasVoted, "You have already voted");
        require(_candidateId > 0 && _candidateId <= candidatesCount, "Invalid candidate ID");

        voters[msg.sender].hasVoted = true;
        voters[msg.sender].votedCandidateId = _candidateId;
        
        // Increase vote count for the chosen candidate
        candidates[_candidateId].voteCount++;

        // Emit event when a vote is cast
        emit Voted(msg.sender, _candidateId);
    }

    // Function to get the total number of votes for a candidate
    function getCandidateVoteCount(uint _candidateId) public view returns (uint) {
        require(_candidateId > 0 && _candidateId <= candidatesCount, "Invalid candidate ID");
        return candidates[_candidateId].voteCount;
    }

    // Function to get the winner (candidate with the highest votes)
    function getWinner() public view returns (string memory winnerName, uint winnerVoteCount) {
        require(!votingActive, "Voting is still active, winner cannot be declared");

        uint maxVoteCount = 0;
        uint winnerId = 0;

        for (uint i = 1; i <= candidatesCount; i++) {
            if (candidates[i].voteCount > maxVoteCount) {
                maxVoteCount = candidates[i].voteCount;
                winnerId = i;
            }
        }

        winnerName = candidates[winnerId].name;
        winnerVoteCount = candidates[winnerId].voteCount;
    }
}
